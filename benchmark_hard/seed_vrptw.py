from envs import MTVRPGenerator, MTVRPEnv

vrptw_data_seed = [
    {
        "title": "Equipment Maintenance Routing with Time Windows",
        "desc_split": (
            "A maintenance company is assigned to inspect several devices starting and ending at node 0.\n" +
            "The locations are <locs>.\n" +
            "Due to limited maintenance materials, each technician can service at most <capacity> devices in a single trip.\n" +
            "Each device has a time window <time_windows> and service time <service_time>.\n" +
            "Each technician travels at <speed>.\n" +
            "The goal is to minimize the technician's travel distance while satisfying time windows and ensuring each device is inspected only once.\n",
        ),
        "data_template": {
            "locs": [[0, 100], [700, 306], [970, 470], [152, 589], [631, 839], [782, 759], [88, 976], [263, 769],
                     [584, 385], [57, 288], [646, 191], [974, 877], [156, 556], [77, 221], [188, 458], [171, 591],
                     [971, 440], [582, 475], [365, 796], [33, 280], [494, 165], [1564, 887], [989, 923], [118, 475],
                     [247, 976], [36, 945], [968, 788], [588, 341], [347, 331], [445, 826], [38, 155], [791, 88],
                     [419, 436], [94, 568], [453, 38], [738, 604], [1036, 867], [462, 946], [726, 681], [82, 461],
                     [925, 470], [132, 130], [225, 384], [611, 145], [862, 190], [141, 717]],
            "time_windows": [[0, 480], [212, 261], [77, 125], [231, 286], [92, 138], [81, 135], [136, 192], [23, 76],
                             [55, 97], [105, 157], [177, 231], [18, 76], [172, 225], [125, 174], [194, 244], [143, 190],
                             [116, 172], [94, 135], [190, 246], [136, 189], [25, 66], [14, 60], [198, 252], [205, 258],
                             [179, 234], [147, 205], [150, 207], [142, 195], [207, 266], [170, 218], [143, 196],
                             [112, 163], [17, 67], [167, 222], [121, 172], [65, 121], [123, 175], [79, 125], [43, 101],
                             [46, 102], [192, 244], [82, 138], [177, 223], [94, 151], [135, 183], [169, 225]],
            "service_time": [24, 21, 18, 25, 23, 19, 11, 11, 18, 10, 20, 12, 20, 12, 18, 25, 22, 12, 20, 14, 18, 14, 21,
                             11, 10, 20, 25, 21, 25, 13, 19, 14, 18, 19, 12, 21, 24, 19, 12, 25, 21, 25, 17, 14, 14],
            "speed": [160],
            "demand_linehaul": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            "capacity": [10],
            "num_depot": [1],
        },
        "user_template": {
            "locs": [[0, 100], [700, 306], [970, 470], [152, 589], [631, 839], [782, 759], [88, 976], [263, 769],
                     [584, 385], [57, 288], [646, 191], [974, 877], [156, 556], [77, 221], [188, 458], [171, 591],
                     [971, 440], [582, 475], [365, 796], [33, 280], [494, 165], [1564, 887], [989, 923], [118, 475],
                     [247, 976], [36, 945], [968, 788], [588, 341], [347, 331], [445, 826], [38, 155], [791, 88],
                     [419, 436], [94, 568], [453, 38], [738, 604], [1036, 867], [462, 946], [726, 681], [82, 461],
                     [925, 470], [132, 130], [225, 384], [611, 145], [862, 190], [141, 717]],
            "time_windows": [[0, 480], [212, 261], [77, 125], [231, 286], [92, 138], [81, 135], [136, 192], [23, 76],
                             [55, 97], [105, 157], [177, 231], [18, 76], [172, 225], [125, 174], [194, 244], [143, 190],
                             [116, 172], [94, 135], [190, 246], [136, 189], [25, 66], [14, 60], [198, 252], [205, 258],
                             [179, 234], [147, 205], [150, 207], [142, 195], [207, 266], [170, 218], [143, 196],
                             [112, 163], [17, 67], [167, 222], [121, 172], [65, 121], [123, 175], [79, 125], [43, 101],
                             [46, 102], [192, 244], [82, 138], [177, 223], [94, 151], [135, 183], [169, 225]],
            "service_time": [24, 21, 18, 25, 23, 19, 11, 11, 18, 10, 20, 12, 20, 12, 18, 25, 22, 12, 20, 14, 18, 14, 21,
                             11, 10, 20, 25, 21, 25, 13, 19, 14, 18, 19, 12, 21, 24, 19, 12, 25, 21, 25, 17, 14, 14],
            "speed": [160],
            "demand": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            "capacity": [10],
            "num_depot": [1],
        },
        "label": "vrptw",
    },
    {
        "title": "Offshore Platform Supply Routing with Weather-Constrained Time Windows",
        "desc_split": (
                "In a scenario where a port needs to deliver supplies to offshore drilling platforms using supply vessels, the location information of each platform is represented as <locs>, the demand is represented as <demand>.\n" +
                "Each platform has a limited service time window due to offshore weather conditions <time_windows> and service time <service_time>.\n" +
                "Each supply vessel has a capacity of <capacity> tons and travels at a speed of <speed> km/h.\n" +
                "Each platform must be visited exactly once.\n" +
                "The objective is to plan vessel routes that start and end at the port, ensuring all platforms are served within their time windows, while minimizing the total travel distance.\n"
        ),
        "data_template": {
            "locs": [[0, 0], [-25.09, 90.14], [46.4, 19.73], [-68.8, -68.8], [20.22, 41.61], [66.49, -57.53],
                     [-63.64, -63.32], [-39.15, 4.95], [-13.61, -41.75], [22.37, -72.1], [-41.57, -26.73],
                     [-8.79, 57.04], [-60.07, 2.85], [18.48, -90.71], [21.51, -65.9], [-39.08, -80.47], [36.85, -11.97],
                     [-75.59, -0.96], [-48.24, 32.5], [-37.66, 4.01], [9.34, -63.03], [19.58, 84.37]],
            "time_windows": [[0, 1000], [290, 404], [103, 203], [327, 427], [255, 341], [443, 519], [335, 407],
                             [74, 185], [259, 363], [259, 341], [154, 240], [90, 177], [197, 272], [399, 480],
                             [435, 518], [181, 284], [86, 173], [479, 570], [300, 397], [155, 260], [134, 203],
                             [72, 133]],
            "service_time": [0, 18, 18, 14, 19, 18, 11, 13, 18, 12, 12, 13, 14, 12, 10, 12, 14, 15, 11, 16, 10, 14],
            "speed": [30],
            "demand_linehaul": [0, 4, 2, 3, 3, 3, 2, 5, 6, 5, 2, 3, 2, 3, 6, 2, 4, 3, 2, 6, 4, 2],
            "capacity": [20],
            "num_depot": [1],
        },
        "user_template": {
            "locs": [[0, 0], [-25.09, 90.14], [46.4, 19.73], [-68.8, -68.8], [20.22, 41.61], [66.49, -57.53],
                     [-63.64, -63.32], [-39.15, 4.95], [-13.61, -41.75], [22.37, -72.1], [-41.57, -26.73],
                     [-8.79, 57.04], [-60.07, 2.85], [18.48, -90.71], [21.51, -65.9], [-39.08, -80.47], [36.85, -11.97],
                     [-75.59, -0.96], [-48.24, 32.5], [-37.66, 4.01], [9.34, -63.03], [19.58, 84.37]],
            "time_windows": [[0, 1000], [290, 404], [103, 203], [327, 427], [255, 341], [443, 519], [335, 407],
                             [74, 185], [259, 363], [259, 341], [154, 240], [90, 177], [197, 272], [399, 480],
                             [435, 518], [181, 284], [86, 173], [479, 570], [300, 397], [155, 260], [134, 203],
                             [72, 133]],
            "service_time": [0, 18, 18, 14, 19, 18, 11, 13, 18, 12, 12, 13, 14, 12, 10, 12, 14, 15, 11, 16, 10, 14],
            "speed": [30],
            "demand": [0, 4, 2, 3, 3, 3, 2, 5, 6, 5, 2, 3, 2, 3, 6, 2, 4, 3, 2, 6, 4, 2],
            "capacity": [20],
            "num_depot": [1],
        },
        "label": "vrptw",
    },
    {
        "title": "Logistics Vehicle Dispatch Optimization Under Multi-Merchant Time Window Constraints",
        "desc_split": (
                "In a scenario where a warehouse needs to deliver goods to multiple merchants using freight trucks, the location information of the warehouse and the merchants is represented as <locs>, the demand of each merchant is denoted as <demand>, each merchant has an individual opening time window <time_windows_open>, and the unloading time required at each merchant is given by <service_time>.\n" +
                "The warehouse operates for <depot_service_time> hours.\n" +
                "Each freight truck has a capacity of <capacity> tons and travels at a speed of <speed> km/h.\n" +
                "Each merchant must be visited exactly once.\n" +
                "The objective is to plan truck routes that start and end at the warehouse, ensure on-time delivery within merchant time windows, and minimize the total travel distance.\n"
        ),
        "data_template": {
            "locs": [[50, 50], [37.45, 95.07], [73.20, 59.87], [15.60, 155.00], [5.81, 86.62], [60.11, 70.81],
                     [20.58, 96.90], [83.24, 21.23], [18.18, 18.34], [30.42, 52.48], [61.19, 13.95], [29.21, 36.63],
                     [45.61, 78.51], [19.97, 51.42], [59.24, 4.65], [60.75, 17.05], [6.51, 94.89], [96.56, 80.84],
                     [30.46, 9.76], [68.42, 44.02], [12.20, 49.52], [3.44, 90.93], [25.88, 66.25], [31.17, 52.01],
                     [54.67, 18.49]],
            "demand_linehaul": [0, 390, 417, 243, 361, 401, 469, 470, 414, 451, 389, 495, 412, 407, 436, 252, 479, 416,
                                451, 387, 240, 356, 214, 496, 264, 208],
            "time_windows": [[0.0, 8.0], [4.36, 8.0], [1.49, 8.0], [0.52, 8.0], [4.57, 8.0], [4.03, 8.0], [4.14, 8.0],
                             [3.56, 8.0], [0.87, 8.0], [2.29, 8.0], [1.07, 8.0], [4.81, 8.0], [3.61, 8.0], [2.15, 8.0],
                             [0.81, 8.0], [2.05, 8.0], [2.12, 8.0], [4.14, 8.0], [3.68, 8.0], [4.93, 8.0], [2.86, 8.0],
                             [1.09, 8.0], [4.06, 8.0], [4.30, 8.0], [3.31, 8.0], [2.35, 8.0]],
            "service_time": [0.0, 0.11, 0.13, 0.16, 0.10, 0.12, 0.15, 0.11, 0.12, 0.08, 0.16, 0.15, 0.12, 0.10, 0.13,
                             0.14, 0.12, 0.16, 0.10, 0.14, 0.14, 0.12, 0.16, 0.13, 0.13, 0.15],
            "speed": [40],
            "capacity": [3],
            "num_depot": [1],
        },
        "user_template": {
            "locs": [[50, 50], [37.45, 95.07], [73.20, 59.87], [15.60, 155.00], [5.81, 86.62], [60.11, 70.81],
                     [20.58, 96.90], [83.24, 21.23], [18.18, 18.34], [30.42, 52.48], [61.19, 13.95], [29.21, 36.63],
                     [45.61, 78.51], [19.97, 51.42], [59.24, 4.65], [60.75, 17.05], [6.51, 94.89], [96.56, 80.84],
                     [30.46, 9.76], [68.42, 44.02], [12.20, 49.52], [3.44, 90.93], [25.88, 66.25], [31.17, 52.01],
                     [54.67, 18.49]],
            "demand": [0, 390, 417, 243, 361, 401, 469, 470, 414, 451, 389, 495, 412, 407, 436, 252, 479, 416,
                       451, 387, 240, 356, 214, 496, 264, 208],
            "service_time": [0.0, 0.11, 0.13, 0.16, 0.10, 0.12, 0.15, 0.11, 0.12, 0.08, 0.16, 0.15, 0.12, 0.10, 0.13,
                             0.14, 0.12, 0.16, 0.10, 0.14, 0.14, 0.12, 0.16, 0.13, 0.13, 0.15],
            "time_windows_open": [0.0, 4.36, 1.49, 0.52, 4.57, 4.03, 4.14, 3.56, 0.87, 2.29, 1.07, 4.81, 3.61, 2.15,
                                  0.81, 2.05,
                                  2.12, 4.14, 3.68, 4.93, 2.86, 1.09, 4.06, 4.30, 3.31, 2.35],
            "depot_service_time": [8],
            "speed": [40],
            "capacity": [3],
        },
        "label": "vrptw",
    },
    {
        "title": "Time-Sensitive Medication Delivery Optimization for Pharmacy Robots",
        "desc_split": (
                "A pharmacy uses robots to deliver medications to the delivery points, the coordinates are <locs>.\n" +
                "Each robot has a capacity of <capacity> units and travels at <speed>.\n" +
                "Robots start and end at the pharmacy, and the unload time for each point is <single_service_time>.\n" +
                "If the next delivery's demand exceeds remaining capacity, the robot must return to restock with a time cost of <depot_service_time>.\n" +
                "Delivery locations have a latest delivery time <time_windows_close> and demand <demand>.\n" +
                "The objective is to minimize total delivery distance.\n"
        ),
        "data_template": {
            "locs": [[25, 50], [19, 84], [17, 87], [10, 34], [48, 27], [23, 53], [6, 53], [9, 22], [33, 69], [12, 34],
                     [10, 63], [12, 52], [31, 73], [47, 48], [0, 38], [48, 62], [48, 78], [5, 56], [27, 23], [32, 90],
                     [41, 43], [45, 15], [12, 84], [46, 39], [3, 93], [12, 28], [5, 77], [34, 63], [26, 14], [1, 55],
                     [30, 18], [29, 34], [45, 17], [37, 3], [24, 48], [12, 24], [26, 69], [39, 60], [44, 93], [22, 83],
                     [28, 13]],
            "time_windows": [[], [0, 40], [0, 60], [0, 20], [0, 40], [0, 60], [0, 40], [0, 40], [0, 40], [0, 60],
                             [0, 60], [0, 60], [0, 60], [0, 40], [0, 60], [0, 20], [0, 40], [0, 60], [0, 40], [0, 20],
                             [0, 40], [0, 40], [0, 60], [0, 40], [0, 60], [0, 40], [0, 40], [0, 40], [0, 40], [0, 60],
                             [0, 40], [0, 20], [0, 40], [0, 40], [0, 60], [0, 60], [0, 20], [0, 40], [0, 40], [0, 20],
                             [0, 60]],
            "demand_linehaul": [0, 4, 2, 5, 3, 5, 5, 4, 6, 5, 4, 5, 2, 4, 2, 5, 6, 4, 6, 4, 4, 6, 5, 5, 6, 5, 6, 5, 6,
                                3, 3, 5, 3, 5, 6, 3, 6, 4, 5, 6, 4],
            "capacity": [12],
            "speed": [36],
            "service_time": [6, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                             0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                             0.5, 0.5, 0.5, 0.5, 0.5],
        },
        "user_template": {
            "locs": [[25, 50], [19, 84], [17, 87], [10, 34], [48, 27], [23, 53], [6, 53], [9, 22], [33, 69],
                     [12, 34],
                     [10, 63], [12, 52], [31, 73], [47, 48], [0, 38], [48, 62], [48, 78], [5, 56], [27, 23],
                     [32, 90],
                     [41, 43], [45, 15], [12, 84], [46, 39], [3, 93], [12, 28], [5, 77], [34, 63], [26, 14],
                     [1, 55],
                     [30, 18], [29, 34], [45, 17], [37, 3], [24, 48], [12, 24], [26, 69], [39, 60], [44, 93],
                     [22, 83],
                     [28, 13]],
            "demand": [0, 4, 2, 5, 3, 5, 5, 4, 6, 5, 4, 5, 2, 4, 2, 5, 6, 4, 6, 4, 4, 6, 5, 5, 6, 5, 6, 5, 6,
                       3, 3, 5, 3, 5, 6, 3, 6, 4, 5, 6, 4],
            "single_service_time": [0.5],
            "depot_service_time": [6],
            "time_windows_close": [40, 60, 20, 40, 60, 40, 40, 40, 60, 60, 60, 60, 40, 60, 20, 40, 60, 40, 20, 40, 40,
                                   60, 40, 60, 40, 40, 40, 40, 60, 40, 20, 40, 40, 60, 60, 20, 40, 40, 20, 60],
            "speed": [36],
            "capacity": [12],
        },
        "label": "vrptw",
    },
    {
        "title": "Bus Scheduling Optimization for Airport Transfers with Time Windows",
        "desc_split": (
                "<num_customer> passengers need transport from the airport to their destinations within a required time, the information is given as <locs_time_windows> with a format of (X Y Earliest_Arrival  Latest_Arrival).\n" +
                "Each bus travels at <speed> km/min, has a capacity of <capacity>, each stop takes <single_service_time> minutes.\n" +
                "Objective: maximize the travel distance while respecting time windows and bus constraints.\n"
        ),
        "data_template": {
            "locs": [[0.0, 0.0], [13.75, 6.22], [19.51, 9.95], [17.32, 5.34], [15.99, 14.09], [11.56, 7.59],
                     [11.56, 11.63], [10.58, 8.12], [18.66, 10.2], [16.01, 10.47], [17.08, 6.85], [10.21, 14.7],
                     [19.7, 12.75], [18.32, 14.39], [12.12, 13.95], [11.82, 10.98], [11.83, 14.22], [13.04, 5.88],
                     [15.25, 6.96], [14.32, 5.45], [12.91, 8.25], [16.12, 8.89], [11.39, 7.71], [12.92, 13.29],
                     [13.66, 8.57], [14.56, 7.81], [17.85, 10.43], [12.0, 6.41], [15.14, 13.02], [15.92, 5.75],
                     [10.46, 14.87], [16.08, 12.72], [11.71, 6.99], [10.65, 5.06], [19.49, 13.15], [19.66, 12.07],
                     [18.08, 12.29], [13.05, 12.71], [10.98, 5.74], [16.84, 8.58], [14.4, 6.16]],
            "time_windows": [[0.0, 180], [19.0, 59.0], [95.0, 135.0], [88.0, 128.0], [33.0, 73.0], [44.0, 84.0],
                             [47.0, 87.0], [57.0, 97.0], [44.0, 84.0], [80.0, 120.0], [54.0, 94.0], [60.0, 100.0],
                             [59.0, 99.0], [89.0, 129.0], [64.0, 104.0], [91.0, 131.0], [20.0, 60.0], [11.0, 51.0],
                             [19.0, 59.0], [26.0, 66.0], [39.0, 79.0], [26.0, 66.0], [89.0, 129.0], [32.0, 72.0],
                             [55.0, 95.0], [91.0, 131.0], [71.0, 111.0], [72.0, 112.0], [71.0, 111.0], [18.0, 58.0],
                             [39.0, 79.0], [35.0, 75.0], [52.0, 92.0], [36.0, 76.0], [60.0, 100.0], [37.0, 77.0],
                             [54.0, 94.0], [87.0, 127.0], [67.0, 107.0], [45.0, 85.0], [78.0, 118.0]],
            "demand_linehaul": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            "capacity": [7],
            "speed": [0.6],
            "service_time": [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                             5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
        },
        "user_template": {
            "num_customer": [40],
            "locs_time_windows": [[0.0, 0.0, 0.0, 180], [13.75, 6.22, 19.0, 59.0], [19.51, 9.95, 95.0, 135.0],
                                  [17.32, 5.34, 88.0, 128.0], [15.99, 14.09, 33.0, 73.0], [11.56, 7.59, 44.0, 84.0],
                                  [11.56, 11.63, 47.0, 87.0], [10.58, 8.12, 57.0, 97.0], [18.66, 10.2, 44.0, 84.0],
                                  [16.01, 10.47, 80.0, 120.0], [17.08, 6.85, 54.0, 94.0], [10.21, 14.7, 60.0, 100.0],
                                  [19.7, 12.75, 59.0, 99.0], [18.32, 14.39, 89.0, 129.0], [12.12, 13.95, 64.0, 104.0],
                                  [11.82, 10.98, 91.0, 131.0], [11.83, 14.22, 20.0, 60.0], [13.04, 5.88, 11.0, 51.0],
                                  [15.25, 6.96, 19.0, 59.0], [14.32, 5.45, 26.0, 66.0], [12.91, 8.25, 39.0, 79.0],
                                  [16.12, 8.89, 26.0, 66.0], [11.39, 7.71, 89.0, 129.0], [12.92, 13.29, 32.0, 72.0],
                                  [13.66, 8.57, 55.0, 95.0], [14.56, 7.81, 91.0, 131.0], [17.85, 10.43, 71.0, 111.0],
                                  [12.0, 6.41, 72.0, 112.0], [15.14, 13.02, 71.0, 111.0], [15.92, 5.75, 18.0, 58.0],
                                  [10.46, 14.87, 39.0, 79.0], [16.08, 12.72, 35.0, 75.0], [11.71, 6.99, 52.0, 92.0],
                                  [10.65, 5.06, 36.0, 76.0], [19.49, 13.15, 60.0, 100.0], [19.66, 12.07, 37.0, 77.0],
                                  [18.08, 12.29, 54.0, 94.0], [13.05, 12.71, 87.0, 127.0], [10.98, 5.74, 67.0, 107.0],
                                  [16.84, 8.58, 45.0, 85.0], [14.4, 6.16, 78.0, 118.0]],
            "single_service_time": [5],
            "capacity": [7],
            "speed": [0.6],
        },
        "label": "vrptw"
    }
]

if __name__ == '__main__':
    problem_type = "vrptw"
    generator = MTVRPGenerator(num_loc=1, variant_preset=problem_type)

    env = MTVRPEnv(generator, check_solution=False)
    td_data = env.generator(1)
    td_data_dict = td_data.to_dict()
    for key in td_data_dict.keys():
        print(key)
        print((td_data_dict[key]))
    print(len([]))

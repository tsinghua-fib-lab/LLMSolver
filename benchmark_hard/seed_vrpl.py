from envs import MTVRPGenerator, MTVRPEnv

vrpl_data_seed = [
    {
        "title": "Unmanned Aerial Vehicle Delivery Problem",
        "desc_split": (
                "A company needs to use drones for parcel delivery. Specifically, given a set of delivery locations relative to the launch site.\n" +\
                "the coordinates of the start point is <loc_depot> and the delivery points are provided as <locs>.\n" +\
                "The drone can carry a maximum weight of <max_weight> kg for items, and the weight of items to be delivered to each location is <loc_weight> kg.\n" +\
                "Each drone has a speed of 2 km/h and a maximum endurance time of 1.37 hours.\n" +\
                "Before the battery is depleted, each drone must return to the launch site to recharge.\n" +\
                "Please plan the flight paths of the drones such that:\n" +\
                "1. Each customer receives their parcel.\n" +\
                "2. Each drone can safely return to the launch site.\n" +\
                "3. The total flight distance of the drones is minimized."
        ),
        "data_template": {
            "locs": [[0.8964, 0.7059],
                    [0.6716, 0.9031],
                    [0.1311, 0.9128],
                    [0.0118, 0.8793],
                    [0.5654, 0.7618],
                    [0.9458, 0.8207],
                    [0.8930, 0.5770],
                    [0.7085, 0.0977],
                    [0.0365, 0.7494],
                    [0.1611, 0.2097],
                    [0.0241, 0.1165],
                    [0.6727, 0.6393],
                    [0.1047, 0.4179],
                    [0.8037, 0.7571],
                    [0.2152, 0.5676],
                    [0.9208, 0.4478],
                    [0.2878, 0.9575],
                    [0.2611, 0.2428],
                    [0.2537, 0.0725],
                    [0.2080, 0.9617],
                    [0.7351, 0.2070]],
            "demand_linehaul": [0.1000, 0.0667, 0.1000, 0.1333, 0.1000, 0.1667, 0.1333, 0.1333, 0.1667,
                                0.1667, 0.0667, 0.1333, 0.0333, 0.3000, 0.2667, 0.1667, 0.2667, 0.0333,
                                0.2333, 0.1667],
            "capacity": [30],
            "speed": [1],
            "distance_limit": [2.74],
            "num_depot": [1],
        },
        "user_template": {
            "loc_depot": [[0.8964, 0.7059]],
            "loc_customer": [[0.6716, 0.9031],
                    [0.1311, 0.9128],
                    [0.0118, 0.8793],
                    [0.5654, 0.7618],
                    [0.9458, 0.8207],
                    [0.8930, 0.5770],
                    [0.7085, 0.0977],
                    [0.0365, 0.7494],
                    [0.1611, 0.2097],
                    [0.0241, 0.1165],
                    [0.6727, 0.6393],
                    [0.1047, 0.4179],
                    [0.8037, 0.7571],
                    [0.2152, 0.5676],
                    [0.9208, 0.4478],
                    [0.2878, 0.9575],
                    [0.2611, 0.2428],
                    [0.2537, 0.0725],
                    [0.2080, 0.9617],
                    [0.7351, 0.2070]],       
            "speed": [2],
            "max_flight_time": [1.37],
            "loc_weight": [0.1000, 0.0667, 0.1000, 0.1333, 0.1000, 0.1667, 0.1333, 0.1333, 0.1667,
                                0.1667, 0.0667, 0.1333, 0.0333, 0.3000, 0.2667, 0.1667, 0.2667, 0.0333,
                                0.2333, 0.1667],
            "max_weight": [30],
        },
        "label": "vrpl",
    },
    {
        "title": "Optimizing Research Team Routes for Polar Biological Sampling in Antarctica with Distance and Time Constraints",
        "desc_split": (
                "Our Antarctic scientific research team needs to conduct polar biological sampling tasks at multiple locations. The coordinates of base camp and the sampling task locations are <locs>.\n" +\
                "The research team can dispatch multiple research teams, each advancing at a speed of <speed> kilometers per day, but they only have enough food to support them for <max_days> days.\n" +\
                "They must return to the base camp before the food runs out.\n" +\
                "At the same time, each sampling location needs to sample <sample_weight> kg of samples, but a team can only carry sample boxes with a capacity of <capacity> kg.\n" +\
                "Please plan the number of research teams and routes to ensure that each team can safely return to the base camp, " +\
                "that each sampling location is sampled by at least one team, and to minimize the total travel distance for all teams."
        ),
        "data_template": {
            "locs": [[0.8004, 0.6360],
                    [0.6770, 0.6895],
                    [0.7237, 0.4662],
                    [0.5300, 0.3197],
                    [0.5679, 0.8576],
                    [0.9738, 0.9931],
                    [0.9280, 0.1327],
                    [0.0710, 0.2058],
                    [0.6708, 0.7078],
                    [0.7635, 0.6208],
                    [0.5689, 0.6751],
                    [0.5786, 0.2123],
                    [0.7354, 0.9506],
                    [0.3772, 0.5466],
                    [0.3866, 0.4817],
                    [0.5174, 0.2252],
                    [0.5288, 0.2695],
                    [0.4326, 0.9270],
                    [0.2724, 0.8253],
                    [0.7451, 0.6034],
                    [0.4603, 0.7962]],
            "demand_linehaul": [0.1000, 0.2333, 0.2667, 0.2667, 0.0333, 0.2667, 0.3000, 0.0333, 0.1667,
                                0.1333, 0.2667, 0.2667, 0.2667, 0.1667, 0.1000, 0.0333, 0.3000, 0.1667,
                                0.0333, 0.2000],
            "capacity": [10],
            "speed": [1],
            "distance_limit": [2.5],
            "num_depot": [1],
        },
        "user_template": {
            "corrdinates": [[0.8004, 0.6360],
                    [0.6770, 0.6895],
                    [0.7237, 0.4662],
                    [0.5300, 0.3197],
                    [0.5679, 0.8576],
                    [0.9738, 0.9931],
                    [0.9280, 0.1327],
                    [0.0710, 0.2058],
                    [0.6708, 0.7078],
                    [0.7635, 0.6208],
                    [0.5689, 0.6751],
                    [0.5786, 0.2123],
                    [0.7354, 0.9506],
                    [0.3772, 0.5466],
                    [0.3866, 0.4817],
                    [0.5174, 0.2252],
                    [0.5288, 0.2695],
                    [0.4326, 0.9270],
                    [0.2724, 0.8253],
                    [0.7451, 0.6034],
                    [0.4603, 0.7962]],
            "sample_weight": [0.1000, 0.2333, 0.2667, 0.2667, 0.0333, 0.2667, 0.3000, 0.0333, 0.1667,
                                0.1333, 0.2667, 0.2667, 0.2667, 0.1667, 0.1000, 0.0333, 0.3000, 0.1667,
                                0.0333, 0.2000], 
            "capacity": [10],
            "speed": [0.5],
            "max_days": [5],
        },
        "label": "vrpl",
    },
    {
        "title": "Designing an Irrigation System for a Large Farm",
        "desc_split": (
            "You need to design an irrigation system for a large farm. The system draws water from a well and distributes it to various fields through pipes.\n" +\
            "For maintenance purposes, each pipe must form a loop, starting from the well and returning to it, with a maximum length of <max_length> per loop.\n" +\
            "The well is located at <loc_well>, and the fields requiring irrigation are located at <loc_lands>.\n" +\
            "A single pipeline can irrigate a maximum area of <max_area>, with each field having an area of <areas>.\n" +\
            "Please design the irrigation system to ensure that each field has access to water while minimizing the total length of all pipes."
        ),
        "data_template": {
            "locs": [[0.1992, 0.1014],
                    [0.1345, 0.8002],
                    [0.2649, 0.3050],
                    [0.9622, 0.0897],
                    [0.2558, 0.3797],
                    [0.3711, 0.2414],
                    [0.1650, 0.3726],
                    [0.1672, 0.4690],
                    [0.6087, 0.0532],
                    [0.8032, 0.0760],
                    [0.6916, 0.2836],
                    [0.4056, 0.2422],
                    [0.0146, 0.2453],
                    [0.9547, 0.9379],
                    [0.6970, 0.2429],
                    [0.5867, 0.4278],
                    [0.8037, 0.0774],
                    [0.6186, 0.4994],
                    [0.0357, 0.0122],
                    [0.9160, 0.0274],
                    [0.3167, 0.1229]],
            "demand_linehaul": [0.1333, 0.1000, 0.1333, 0.2000, 0.0667, 0.0333, 0.2667, 0.1000, 0.2667,
        0.0667, 0.1000, 0.3000, 0.3000, 0.2667, 0.1667, 0.3000, 0.3000, 0.2667,
        0.0667, 0.0333],
            "capacity": [30],
            "distance_limit": [2.5395],
            "num_depot": [1],
        },
        "user_template": {
            "loc_well": [[0.1992, 0.1014]],
            "loc_lands": [[0.1345, 0.8002],
                        [0.2649, 0.3050],
                        [0.9622, 0.0897],
                        [0.2558, 0.3797],
                        [0.3711, 0.2414],
                        [0.1650, 0.3726],
                        [0.1672, 0.4690],
                        [0.6087, 0.0532],
                        [0.8032, 0.0760],
                        [0.6916, 0.2836],
                        [0.4056, 0.2422],
                        [0.0146, 0.2453],
                        [0.9547, 0.9379],
                        [0.6970, 0.2429],
                        [0.5867, 0.4278],
                        [0.8037, 0.0774],
                        [0.6186, 0.4994],
                        [0.0357, 0.0122],
                        [0.9160, 0.0274],
                        [0.3167, 0.1229]],
            "max_length": [2.5395],
            "max_area": [30],
            "areas": [0.1333, 0.1000, 0.1333, 0.2000, 0.0667, 0.0333, 0.2667, 0.1000, 0.2667,
        0.0667, 0.1000, 0.3000, 0.3000, 0.2667, 0.1667, 0.3000, 0.3000, 0.2667,
        0.0667, 0.0333],
        },
        "label": "vrpl",
    },
    {
        "title": "Power Company Signal Tower Inspection",
        "desc_split": (
                "Due to rain and snow, a power company must inspect several signal towers potentially impacted by the weather. Workers will drive from the depot <loc_depot> to inspect the towers, located at <locs>.\n" +
                "The maintenance of a signal tower requires <equipment_num> set of maintenance equipment, and a vehicle can carry a maximum of <capacity> sets of maintenance equipment.\n" +
                "Since the towers are in mountainous areas with no gas stations along the route, workers must return to the depot before running out of fuel.\n" +
                "A fully fueled service vehicle can travel <distance_limit> km.\n" +
                "Please plan a route for the power company to ensure all signal towers are inspected and the workers can safely return to the depot."
        ),
        "data_template": {
            "locs": [[0.1419, 0.1857],
                    [0.1926, 0.5126],
                    [0.7123, 0.1064],
                    [0.9827, 0.4145],
                    [0.0544, 0.7004],
                    [0.3473, 0.2630],
                    [0.1946, 0.7191],
                    [0.3850, 0.7720],
                    [0.4644, 0.0506],
                    [0.5828, 0.8297],
                    [0.1691, 0.1657],
                    [0.0016, 0.6660],
                    [0.0970, 0.2941],
                    [0.1065, 0.3028],
                    [0.2096, 0.9231],
                    [0.4395, 0.7530],
                    [0.2318, 0.2309],
                    [0.8611, 0.5348],
                    [0.6794, 0.4672],
                    [0.7200, 0.5891],
                    [0.2699, 0.5819]],
            "distance_limit": [2.2027],
            "demand_linehaul": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
            "capacity": [30],
            "num_depot": [1],
        },
        "user_template": {
            "loc_depot": [[0.1419, 0.1857]],
            "loc_tower": [[0.1926, 0.5126],
                    [0.7123, 0.1064],
                    [0.9827, 0.4145],
                    [0.0544, 0.7004],
                    [0.3473, 0.2630],
                    [0.1946, 0.7191],
                    [0.3850, 0.7720],
                    [0.4644, 0.0506],
                    [0.5828, 0.8297],
                    [0.1691, 0.1657],
                    [0.0016, 0.6660],
                    [0.0970, 0.2941],
                    [0.1065, 0.3028],
                    [0.2096, 0.9231],
                    [0.4395, 0.7530],
                    [0.2318, 0.2309],
                    [0.8611, 0.5348],
                    [0.6794, 0.4672],
                    [0.7200, 0.5891],
                    [0.2699, 0.5819]],
            "max_distance": [2.2027],
            "equipment_num": [1],
            "capacity": [30],
        },
        "label": "vrpl",
    },
    {
        "title": "School Bus Route Optimization",
        "desc_split": (    
            "You need to plan a route for a school bus to drop off all students at their homes and return to the school without refueling.\n" +
            "The school is located at <school>, and the students' homes are located at <homes>.\n" +
            "The school bus has a maximum range of <max_distance> km when fully fueled.\n" +
            "Please design a route to ensure all students are delivered home and the bus returns to the school within the fuel limit."
        ),
        "data_template": {
            "locs": [[0.0704, 0.4355],
                    [0.5380, 0.2166],
                    [0.6099, 0.3619],
                    [0.4306, 0.6357],
                    [0.6129, 0.0445],
                    [0.4192, 0.9293],
                    [0.9071, 0.9609],
                    [0.9026, 0.6021],
                    [0.3437, 0.6745],
                    [0.9666, 0.8759],
                    [0.0870, 0.4125],
                    [0.7695, 0.7160],
                    [0.8093, 0.9038],
                    [0.8441, 0.3375],
                    [0.0666, 0.1730],
                    [0.5351, 0.6145],
                    [0.3732, 0.8893],
                    [0.5307, 0.2605],
                    [0.8934, 0.0847],
                    [0.7521, 0.7470],
                    [0.0263, 0.1879]],
            "demand_linehaul": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
            "capacity": [30],
            "distance_limit": [2.2921],
            "num_depot": [1],
        },
        "user_template": {
            "num_students": [20],
            "school": [[0.0704, 0.4355]],
            "homes": [[0.5380, 0.2166],
                    [0.6099, 0.3619],
                    [0.4306, 0.6357],
                    [0.6129, 0.0445],
                    [0.4192, 0.9293],
                    [0.9071, 0.9609],
                    [0.9026, 0.6021],
                    [0.3437, 0.6745],
                    [0.9666, 0.8759],
                    [0.0870, 0.4125],
                    [0.7695, 0.7160],
                    [0.8093, 0.9038],
                    [0.8441, 0.3375],
                    [0.0666, 0.1730],
                    [0.5351, 0.6145],
                    [0.3732, 0.8893],
                    [0.5307, 0.2605],
                    [0.8934, 0.0847],
                    [0.7521, 0.7470],
                    [0.0263, 0.1879]],
            "max_distance": [2.2921],
            "max_speed": [120],
        },
        "label": "vrpl"
    }
]

if __name__ == '__main__':
    problem_type = "vrpl"
    generator = MTVRPGenerator(num_loc=1, variant_preset=problem_type)

    env = MTVRPEnv(generator, check_solution=False)
    td_data = env.generator(1)
    td_data_dict = td_data.to_dict()
    for key in td_data_dict.keys():
        print(key)
        print((td_data_dict[key]))
    print(len([]))
